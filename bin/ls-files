#!/bin/bash

function help {
  case "$SCRIPT_NAME" in
    lfs-files)
      echo "$SCRIPT_NAME - Invoke git lfs ls-files with permutated wildmatch patterns."
      ;;

    ls-files)
      echo "$SCRIPT_NAME - Invoke git ls-files with permutated wildmatch patterns.

In addition to acting as a front-end to 'git ls-files', this script can
provide front-ends for 'git lfs ls-files', 'git lfs track' and
'git lfs untrack'. You can enable this functionality by linking the
ls-files script to scripts named 'lfs-files', 'track' and 'untrack'.

Here is how to do that:
$ sudo ln -s \"\$( which ls-files )\" /usr/local/bin/{lfs-files,track,untrack}

Examine the symlinks that were just created:
$ which ls-files
/usr/local/bin/ls-files

$ which lfs-files
/usr/local/bin/lfs-files

$ which track
/usr/local/bin/track

$ which untrack
/usr/local/bin/untrack


The above front-end scripts permutate wildmatch patterns into a more general
git ignore / git lfs pattern. They do not support all options supported by
the commands that they invoke. You can, of course, run those commands when required.
"
      ;;

    track)
      echo "$SCRIPT_NAME - Invoke git lfs track with permutated wildmatch patterns."
      ;;

    untrack)
      echo "$SCRIPT_NAME - Invoke git lfs untrack with permutated wildmatch patterns."
      ;;

    *)
      echo "The name of this command was not recognized by help."
      exit 2
      ;;
  esac

  echo "Syntax:
  $ $SCRIPT_NAME [OPTIONS] PATTERN ...

  OPTIONS are:
    -c Expand pattern to upper and lower case, helpful for media files
    -d Dry run (display filename patterns that would be affected)
    -e Apply the pattern everywhere (all directories in the Git repository)

Examples:
  $ $SCRIPT_NAME -d zip
  DRY RUN: $CMD *.zip

  $ $SCRIPT_NAME -d pdf zip
  DRY RUN: $CMD *.pdf
  DRY RUN: $CMD *.zip

  $ $SCRIPT_NAME -dc mp3
  DRY RUN: $CMD *.mp3 *.MP3

  $ $SCRIPT_NAME -dc mp3 mp4
  DRY RUN: $CMD *.mp3 *.MP3
  DRY RUN: $CMD *.mp4 *.MP4

  $ $SCRIPT_NAME -de zip
  DRY RUN: $CMD *.zip **/*.zip

  $ $SCRIPT_NAME -dce mp3
  DRY RUN: $CMD *.mp3 *.MP3 **/*.mp3 **/*.MP3

  $ $SCRIPT_NAME -dce mp3 mp4
  DRY RUN: $CMD *.mp3 *.MP3 **/*.mp3 **/*.MP3
  DRY RUN: $CMD *.mp4 *.MP4 **/*.mp4 **/*.MP4

See also:
  Related scripts: lfs-files, ls-files, track, unmigrate, and untrack.
  https://mslinn.com/git/5300-git-lfs-patterns-tracking.html
"
  exit 1
}

function set_command {
  SCRIPT_NAME="$( basename "$0" )"
  case "$SCRIPT_NAME" in
    lfs-files)
      CMD="git lfs ls-files"
      ;;

    ls-files)
      CMD="git ls-files"
      ;;

    track)
      CMD="git lfs track"
      ;;

    untrack)
      CMD="git lfs untrack"
      ;;

    *)
      echo "The name of this command was not recognized by function set_command."
      exit 2
      ;;
  esac
}

function invoke_once {
  # shellcheck disable=SC2046
  $CMD $( expand "$1" )
}

function expand {
  if [ "$BOTH_CASES" ]; then
    LC="${1,,}"
    UC="${1^^}"
    if [ "$EVERYWHERE" ]; then
      echo "*.$LC *.$UC **/*.$LC **/*.$UC"
    else
      echo "*.$LC *.$UC"
    fi
  else
    if [ "$EVERYWHERE" ]; then
      echo "*.$1 **/*.$1"
    else
      echo "*.$1"
    fi
  fi
}

set_command

unset BOTH_CASES DRY_RUN EVERYWHERE
while getopts "cdeh" opt; do
   case $opt in
       c ) BOTH_CASES=true ;;
       d ) DRY_RUN=true ;;
       e ) EVERYWHERE=true ;;
       h ) help ;;
       [?]) help ;;
   esac
done
shift "$(($OPTIND-1))"

if [ -z "$1" ] && [ "$SCRIPT_NAME" != "ls-files" ] && [ "$SCRIPT_NAME" != "lfs-files" ]; then help; fi

if [ "$DRY_RUN" ]; then
  for PAT in "$@"; do
    echo "DRY RUN: $CMD $( expand "$PAT" )"
  done
  exit 0
fi

set -f
for PAT in "$@"; do
  invoke_once "$PAT"
done

if [ -z "$1" ] &&
   [ "$SCRIPT_NAME" == "ls-files" ] ||
   [ "$SCRIPT_NAME" == "lfs-files" ]; then
  $CMD
fi
