#!/bin/bash

# Run this script on the client that should hold the original copy of the
# git repository used to evaluate all Git LFS servers.
# Initializes the new repo, but does not set origin.url or lfs.url.
#
# The new git repository is placed in "$work/git/original_repo",
# and is copied to gojira:lfs_eval/original_repos/normal_repo.

function help {
  if [ "$1" ]; then printf "$1\n\n"; fi
  echo "$(basename "$0") creates a standard git repository for testing Git LFS implementations.

This script creates a new Git repository, and an empty clone of the new repository on GitHub.
The local copy is then populated with test data.

This script uses test data from $work/git/git_lfs_test_data/, which must exist.
See https://mslinn.com/git/5600-git-lfs-evaluation.html#git_lfs_test_data

Syntax: $(basename "$0") SCENARIO_NUMBER
Where:
  SCENARIO_NUMBER can range from 3 through 9, inclusive.

Scenarios 1 and 2 exercise bare git repositories, created by newBareRepo.
"
  exit
}

# @param $1 index origin 1
function lfs_url {
  urls=(
    "/mnt/server_repos/scenario1.lfs"
    "gojira:/eval_repos/scenario2.lfs"
  )
  echo "${urls[$1]}"
}

function doit {
  # Create the directory for the new git repository
  SCENARIO="scenario$1"
  REPO_DIR="$work/git/$SCENARIO"
  echo "Creating '$REPO_DIR'"
  mkdir "$REPO_DIR"
  mkdir "$REPO_DIR.lfs"

  cd "$REPO_DIR" || exit

  initialize "$1"

  THIS_DIR="$(basename "$PWD")"
  JSON="$( gh repo list --json name )"
  EXISTS="$( jq -c --arg CWD "$THIS_DIR" '.[] | select(.name==$CWD)' <<< "$JSON" )"
  if [ "$EXISTS" ]; then
    if [ "$FORCE" ]; then
      echo "Recreating the '$THIS_DIR' repository on GitHub"
      # From https://cli.github.com/manual/gh_repo_delete:
      # Deletion requires authorization with the delete_repo scope.
      # To authorize, run gh auth refresh -s delete_repo
      gh repo delete "$THIS_DIR"
    else
      echo "Error: a repository called '$THIS_DIR' already exists in your GitHub account and the -f option was not specified."
      exit 5
    fi
  fi
  # Create a private git repository from the current directory
  gh repo create --private --source=. --remote=origin

  populate "$1"
  echo "All done."
}

function initialize {
  echo "Initializing the repository '$REPO_DIR' on this computer."

  # Make the current directory into an empty git repository
  git init

  # Ensure the git lfs extension filters are defined, and the repo's pre commit hooks are installed.
  git lfs install
}

function populate {
  echo "Creating README.md"
  printf "# Scenario $1\nThis is a normal file.\n" > README.md

  echo "Copying $work/git/git_lfs_test_data/"
  rsync -at --progress "$work/git/git_lfs_test_data/" ./
}


unset FORCE
while getopts "fh" opt; do
   case $opt in
       f ) export FORCE=true ;;
       h ) help ;;
       [?]) help ;;
   esac
done
shift "$(($OPTIND-1))"


if [ -z "$1" ]; then help "Error: Please provide the scenario number."; fi
if (( "$1" < 1 )); then help "Error: Invalid scenario number must be at least 3 ('$1' was provided)."; fi
if (( "$1" < 3 )); then help "Error: Scenarios 1 and 2 are for bare git repositories; use newBareRepo instead."; fi
if (( "$1" > 9 )); then help "Error: Invalid scenario number must be less than 10 ('$1' was provided)."; fi

if [ -z "$work" ]; then help "Error: the \"\$work\" environment variable is undefined."; fi
if [ -d "$work/$1" ]; then
  echo "Error: the directory '$work/$1' already exists."
  exit 2
fi

if [ ! -d "$work/git/git_lfs_test_data/" ]; then
  help "Error: '$work/git/git_lfs_test_data/' does not exist."
fi

doit "$1"
