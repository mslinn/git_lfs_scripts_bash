#!/bin/bash

CHECKSUM_FILE=".checksums"


function help {
  echo "$( basename "$0" ) - Report names, CRC and size of changed files.

Syntax:
  $( basename "$0" ) [DIRECTORY]
  where DIRECTORY can be relative or absolute.

The first time this script runs, it creates a file called $CHECKSUM_FILE in the current directory.
Each time it runs thereafter, any files whose contents change are reported."
  exit
}

# Directory to scan
if [ "$1" ]; then
  DIR="$1"
else
  DIR="."
fi


# Function to parse command-line options
parse_options() {
  unset DEBUG
  while getopts "h" opt; do
    case $opt in
    *)
      help
      ;;
    esac
  done
}

# Function to compute checksums and write them to a file
compute_checksums() {
  local output_file="$1"
  find "$DIR" \( -path './.git*' -prune -o -path "./$CHECKSUM_FILE" -prune \) -o -type f -print0 | \
    xargs -0 cksum | \
    sort >"$output_file"
}

# Function to get the human-readable file size using find
get_file_size() {
  local file="$1"
  # Using find to get the file size in bytes, then convert to human-readable format
  size_in_bytes=$(find "$file" -printf "%s")
  # Convert bytes to human-readable format
  human_size=$(numfmt --to=iec "$size_in_bytes")
  echo "$human_size"
}

# Function to compare checksums with the saved values
compare_checksums() {
  if [[ ! -f "$CHECKSUM_FILE" ]]; then
    echo "Checksum file not found. This should not happen if cksum_output exists."
    exit 1
  fi

  TMP_FILE=$(mktemp /tmp/cksum_compare_XXXXXX.txt)

  # Ensure the temporary file gets deleted when the script finishes or exits
  trap 'rm -f "$TMP_FILE"' EXIT

  compute_checksums "$TMP_FILE"

  # Compare checksums directly
  while read -r line; do
    # Extract checksum and file name from saved cksum_output
    old_crc=$(echo "$line" | awk '{print $1}')
    file_path=$(echo "$line" | awk '{print $3}')

    # Skip if it's the checksum file itself
    if [[ "$file_path" == "$CHECKSUM_FILE" ]]; then
      continue
    fi

    # Find corresponding line in the current checksum output
    new_crc=$(grep -E "(^|\s)$file_path($|\s)" "$TMP_FILE" | awk '{print $1}')

    # If the checksums don't match, report the change
    if [[ "$old_crc" != "$new_crc" ]]; then
      old_size=$(get_file_size "$file_path")
      new_size=$(get_file_size "$file_path")
      echo -e "${YELLOW}$file_path CRC was: $old_crc, $old_size; CRC is now: $new_crc, $new_size${NORMAL}"
    fi
  done <"$CHECKSUM_FILE"
}


NORMAL=$(tput sgr0)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)

# Parse command-line options
parse_options "$@"

# If cksum_output exists, compare the checksums and replace it with the current checksums
if [[ -f "$CHECKSUM_FILE" ]]; then
  compare_checksums
fi
compute_checksums "$CHECKSUM_FILE"
