#!/bin/bash

function help {
  if [ "$1" ]; then echo "$1"; fi
  echo "$(basename "$0") - Create a new bare Git repository.

Syntax: $(basename "$0") /path/to/new/repo.git

Normally this script would be run on a Git server, because
that is where bare Git repositories normally live.

A new Git repository will be created in /path/to/new/repo.git,
which should not already exist.

The SGID permission for the new Git repository will be set for group git_access,
which is created if it does not exist.

The parent directory (/path/to/new/) will be created if it does not already exist.
The name of the repo must not contain spaces.
If the specified name does not end with a .git suffix, the suffix is appended.

Git configuration parameter 'receive.denyCurrentBranch' is set to ignore.
"
  exit 1
}

function configure {
  git config receive.denyCurrentBranch ignore
}

function initialize {
  mkdir --mode=g+s "$REPO_PATH/$REPO_NAME"
  sudo chgrp git_access $REPO_NAME
  git init --bare --shared=everybody "$REPO_PATH/$REPO_NAME"
}

if [ -z "$1" ]; then help; fi

if [ "$(getent group admin)" ]; then
  sudo groupadd git_access
fi

export REPO_PATH="$( dirname "$1" )"
export REPO_NAME="$( basename "$1" )"
if [[ "$REPO_NAME" != *.git ]]; then export REPO_NAME="$REPO_NAME.git"; fi
if [ -f "$REPO_PATH/$REPO_NAME" ]; then help "Error: '$REPO_PATH/$REPO_NAME' already exists."; fi
cd "$REPO_PATH" || exit 1

initialize "$1"
cd "$REPO_PATH/$REPO_NAME" || exit 3
configure
